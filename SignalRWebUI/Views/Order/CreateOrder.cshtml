@model CreateOrderViewModel

@{
    ViewData["Title"] = "CreateOrder";
    Layout = "~/Views/AdminLayout/Index.cshtml";
}

@section Styles {
    <style>
  
     
        /* Navbar'a yer bırakmak için üst boşluk */
        .create-order-body {
            padding-top: 100px; /* Navbar yüksekliğine göre ayarlandı */
            background: #f5f7fa;
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #2e3a59;
            font-size: 18px;
            line-height: 1.6;
        }

        form {
            max-width: 900px;
            margin: 0 auto;
            background: #ffffff;
            padding: 2.5rem 3rem;
            border-radius: 20px;
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.08);
        }

        label {
            display: block;
            font-weight: 700;
            margin-bottom: 0.5rem;
            font-size: 1.3rem;
            color: #344767;
        }

        input.form-control,
        textarea.form-control {
            width: 100%;
            padding: 14px 20px;
            font-size: 1.2rem;
            border-radius: 12px;
            border: 2px solid #d1d9e6;
            background: #f8f9fc;
            transition: all 0.3s ease;
        }

            input.form-control:focus,
            textarea.form-control:focus {
                outline: none;
                border-color: #4f7df3;
                background: #ffffff;
                box-shadow: 0 0 8px rgba(79, 125, 243, 0.35);
            }

        .row {
            display: flex;
            flex-wrap: wrap;
            gap: 2rem;
            margin-top: 1rem;
            margin-bottom: 2rem;
        }

        .product-item {
            background: #fff;
            flex: 1 1 calc(33.333% - 2rem);
            border-radius: 18px;
            padding: 1.6rem 1.8rem;
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.05);
            cursor: pointer;
            transition: transform 0.25s ease, box-shadow 0.25s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
        }

            .product-item:hover {
                transform: translateY(-8px);
                box-shadow: 0 14px 30px rgba(0, 0, 0, 0.1);
            }

            .product-item.selected {
                border: 3px solid #4f7df3;
                box-shadow: 0 0 15px rgba(79, 125, 243, 0.6);
                background: #f0f4ff;
            }

        .product-image img {
            max-height: 110px;
            border-radius: 14px;
            margin-bottom: 1rem;
            object-fit: contain;
        }

        .product-name {
            font-size: 1.25rem;
            font-weight: 600;
            color: #223354;
            margin-bottom: 0.5rem;
            text-align: center;
        }

        .product-price {
            font-size: 1.15rem;
            color: #4f7df3;
            font-weight: 700;
        }

        .product-item input[type="checkbox"] {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 100%;
            width: 100%;
            top: 0;
            left: 0;
            margin: 0;
        }

        #totalPrice {
            font-weight: 700;
            font-size: 1.4rem;
            background: #e8eefd;
            border: none;
            color: #4f7df3;
            text-align: right;
            padding: 14px 20px;
            border-radius: 14px;
        }

        #selectedProductsList {
            margin-top: 1rem;
            max-height: 220px;
            overflow-y: auto;
            padding: 0;
        }

            #selectedProductsList li {
                background: #ffffff;
                margin-bottom: 10px;
                border-radius: 12px;
                padding: 12px 18px;
                font-weight: 600;
                font-size: 1.15rem;
                color: #223354;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            #selectedProductsList .badge {
                background: linear-gradient(135deg, #4f7df3, #3762d8);
                font-size: 1rem;
                padding: 6px 14px;
                border-radius: 9999px;
                color: white;
                font-weight: 700;
            }

        button.btn-primary {
            width: 100%;
            padding: 18px;
            font-size: 1.4rem;
            font-weight: 800;
            border-radius: 20px;
            background: linear-gradient(90deg, #4f7df3, #3762d8);
            border: none;
            color: #fff;
            box-shadow: 0 12px 20px rgba(55, 98, 216, 0.6);
            transition: all 0.3s ease;
        }

            button.btn-primary:hover {
                background: linear-gradient(90deg, #3762d8, #2b4bbd);
                box-shadow: 0 15px 25px rgba(43, 75, 189, 0.8);
                transform: translateY(-3px);
            }

        @@media (max-width: 992px) {
            .product-item {
                flex: 1 1 calc(50% - 2rem);
            }
        }

        @@media (max-width: 576px) {
            form {
                padding: 1.5rem 2rem;
            }

            .product-item {
                flex: 1 1 100%;
            }

            input.form-control, textarea.form-control {
                font-size: 1rem;
                padding: 12px 14px;
            }

            button.btn-primary {
                font-size: 1.2rem;
                padding: 14px;
            }
        }
    </style>
}

@section Scripts {
    <script>
        function toggleProduct(element) {
            const checkbox = element.querySelector('input[type="checkbox"]');
            const id = element.getAttribute("data-id");
            const name = element.getAttribute("data-name");
            const price = parseFloat(element.getAttribute("data-price"));

            element.classList.toggle("selected");
            checkbox.checked = !checkbox.checked;

            updateSelectedList();
        }

        function updateSelectedList() {
            const selectedItems = document.querySelectorAll('.product-item input[type="checkbox"]:checked');
            const list = document.getElementById("selectedProductsList");
            const totalInput = document.getElementById("totalPrice");

            list.innerHTML = "";
            let total = 0;

            selectedItems.forEach(cb => {
                const parent = cb.closest('.product-item');
                const name = parent.getAttribute("data-name");
                const price = parseFloat(parent.getAttribute("data-price"));
                total += price;

                const li = document.createElement("li");
                li.className = "list-group-item selected-item";
                li.innerText = `${name} - ${price.toFixed(2)}₺`;
                list.appendChild(li);
            });

            totalInput.value = total.toFixed(2);
        }
    </script>
}


<div class="container create-order-body">
    <h2 class="text-primary mb-4">📝 Yeni Sipariş Oluştur</h2>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <form asp-action="CreateOrder" method="post">
        <div class="mb-3">
            <label>Masa No</label>
            <input asp-for="Order.TableNumber" class="form-control" required />
        </div>

        <div class="mb-3">
            <label>Açıklama</label>
            <textarea asp-for="Order.Description" class="form-control"></textarea>
        </div>

        <div class="mb-3">
            <label>Sipariş Tarihi</label>
            <input asp-for="Order.OrderDate" class="form-control" type="datetime-local" required />
        </div>

        <div class="mb-4">
            <label>Ürünler</label>
            <div class="row">
                @if (Model.Products != null && Model.Products.Any())
                {
                    @foreach (var product in Model.Products)
                    {
                        <div class="col-md-4 mb-4">
                            <div class="product-item"
                                 data-id="@product.ProductId"
                                 data-name="@product.ProductName"
                                 data-price="@product.Price"
                                 onclick="toggleProduct(this)">

                                <div class="product-image mb-2">
                                    <img src="@product.ImageUrl" alt="@product.ProductName" class="img-fluid rounded" />
                                </div>

                                <div class="product-name">@product.ProductName</div>
                                <div class="product-price">@product.Price.ToString("C2")</div>

                                <input type="checkbox" name="SelectedProductIds" value="@product.ProductId" hidden />
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-warning">Ürün listesi yüklenemedi.</div>
                }
            </div>
        </div>

        <div class="mb-3">
            <label>Toplam Tutar</label>
            <input asp-for="Order.TotalOrderPrice" class="form-control" id="totalPrice" readonly />
        </div>

        <div class="mb-3">
            <label>Seçilen Ürünler</label>
            <ul id="selectedProductsList" class="list-group"></ul>
        </div>

        <button type="submit" class="btn btn-primary">Siparişi Kaydet</button>
    </form>
</div>
